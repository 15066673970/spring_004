spring-aop:横向重复，纵向抽取，学习springaop的目的就是让spring帮我们生成代理对象。
spring-aop的原理：
		动态代理（优先）：被代理对象必须要实现接口，才能产生代理对象，如果没有接口将不能使用动态代理技术。
		cglib（没有接口）：第三方代理技术，cglib代理。对于任何类生成代理。代理的原理是对目标对象进行继承代理。
				如果目标对象是被final修饰的，那么该类无法被cglib代理。

spring-aop的名词：
	Joinpoint(连接点):所谓连接点是指那些被拦截到的点。在 spring 中,这些点指的是方法,因为 spring 只
	支持方法类型的连接点.
	Pointcut(切入点):所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义.
	Advice(通知/增强):所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知.通知分为前置通知,后置
	通知,异常通知,最终通知,环绕通知(切面要完成的功能)
	Introduction(引介):引介是一种特殊的通知在不修改类代码的前提下, Introduction 可以在运行期为类
	动态地添加一些方法或 Field.
	Target(目标对象):代理的目标对象
	Weaving(织入):是指把增强应用到目标对象来创建新的代理对象的过程.
	spring 采用动态代理织入，而 AspectJ 采用编译期织入和类装在期织入
	Proxy（代理） :一个类被 AOP 织入增强后，就产生一个结果代理类
	Aspect(切面): 是切入点和通知（引介）的结合
观光代码：proxy包：动态代理和cglib代理
使用spring-aop的步骤： springaop包
	1.导包
	2.准备目标对象：目标对象就是UserServiceImpl.java
	3.准备通知 :新建类MyAdvice，
	4.配置进行织入，将通知织入目标对象中。
使用注解配置spring-aop的步骤：annotation包
	1.导包
	2.准备目标对象：目标对象就是UserServiceImpl.java
	3.准备通知：1.新建类MyAdvice1,首先要在通知类里面使用注解进行修改。
	4.配置进行织入，将通知织入目标对象中：2.其次要在配置文件applicationContext中开启使用注解配置spring-aop